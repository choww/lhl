#!/usr/bin/env ruby
require 'byebug'
require 'io/console'
require_relative 'contact'
require_relative 'phone_numbers'

# Interfaces between a user and their contact list. Reads from and writes to standard I/O.
# Sample query: ruby contact_list.rb show 1 => should display the contact with and ID of 1
class ContactList
  def initialize
    # keep track of how many lines are left to read in contacts.csv
    @readable_contacts = 0
    # keep track of where you are in pagination [which idx you should start reading from]
    @curr_row = 0
    @contacts = Contact.all
  end

  def command_menu
    puts "new    - Create a new contact"
    puts "update - Update an existing contact"
    puts "delete - Delete an existing contact"
    puts "list   - List all contacts"
    puts "show   - Show a contact"
    puts "search - Search contacts"
  end
  
  # track number of lines remaining to read in an open CSV file
  def track_paginate
   @readable_contacts = @contacts.length
  end

  def paginate_contacts
    last_row = @curr_row + 5
    grouped_contacts = @contacts[@curr_row, last_row]
    
    grouped_contacts.each do |contact|
      format_contact(contact)
      format_phone(contact)
    end

    @curr_row = last_row
    @readable_contacts -= 5
  end

  def format_phone(contact)
    contact.phone_numbers.each do |number|
      puts "#{number.label}: #{number.number}"
    end
  end

  def format_contact(contact)
    puts "#{contact.id} #{contact.name}"
    puts "#{contact.email}"
  end
 
  def total_records
    puts "---"
    puts "#{@contacts.length} records total"
  end

  def add_contact(info)
    # use hash to store args & pass it to Contact.create & test for presence of phone key
    name = info.first
    if info.length == 2 
      email = info.last
      Contact.create(name, email)
    else
      email = info[1]
      len = info.length 
      phone = info[2, len]
      Contact.create(name, email, phone)
   end 
  end

  def update_contact(id)
    puts "Enter new name:"
    new_name = STDIN.gets
    puts "Enter new email:"
    new_email = STDIN.gets

    result = Contact.find(id[0])
    result.name = new_name
    result.email = new_email
    result.save
  end

  def delete_contact(id)
    contact = Contact.find(id[0])
    contact.destroy
  end
  def eval_command(response)
    case response.shift
    when "new"
      add_contact(response)
    when "update"
      update_contact(response)
    when "delete"
      delete_contact(response)
    when "list"
      track_paginate
      begin
        paginate_contacts 
        puts "Hit any key to show more"
        STDIN.getch
      end while @readable_contacts > 0
      total_records
    when "show"
      id = response.shift.to_i
      format_contact(Contact.find(id))
    when "search"
      term = response.shift
      results = Contact.search(term)
      results.each {|contact| format_contact(contact)} 
    else
      puts "Choose one from the  list of available commands: "
      command_menu
    end
  end
  
  def run
    eval_command(ARGV)
  end 

end

list = ContactList.new
puts list.run

